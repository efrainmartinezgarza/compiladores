[RESULTADO] EXITOSO
--------------------------------------------------

Código original:
------------------------------
program myProgram;
var x, y: int; a, b: float; c_d8, d: int; total: int;

void prinst() [{ print("Hello"); } ];
void printSum(a: int, b: int) [ var result: int; { result = a + b; print(result); } ];
void greet() [ var msg: float; { print("Hello"); } ];

main {

  x = 3 + 4 - 2 * 5 - 2;
  y = 5;
  total = x + y;

  if (x < 5) { x = x + 1; } else { x = 0; }; 
  if (x > 0) { print(x); };

  while (y < 10) do { y = y + 1; print("Agua"); };
  while (x > 0) do { x = x - 1; };
  
  printSum(2, 4);
  greet();
  
  print("Hello world");
  print(y + 2);
  print(x);
  print("cama de agua",y, "agua");
  print(y, "perro");

}
end


--------------------------------------------------

Tokens encontrados:
------------------------------
Token            |   Carácter
------------------------------
PROGRAM_KWORD    | 'program' 
ID               | 'myProgram'
SEMICOLON        | ';'       
VAR_KWORD        | 'var'     
ID               | 'x'       
COMMA            | ','       
ID               | 'y'       
COLON            | ':'       
INT_KWORD        | 'int'     
SEMICOLON        | ';'       
ID               | 'a'       
COMMA            | ','       
ID               | 'b'       
COLON            | ':'       
FLOAT_KWORD      | 'float'   
SEMICOLON        | ';'       
ID               | 'c_d8'    
COMMA            | ','       
ID               | 'd'       
COLON            | ':'       
INT_KWORD        | 'int'     
SEMICOLON        | ';'       
ID               | 'total'   
COLON            | ':'       
INT_KWORD        | 'int'     
SEMICOLON        | ';'       
VOID_KWORD       | 'void'    
ID               | 'prinst'  
L_PARENTHESIS    | '('       
R_PARENTHESIS    | ')'       
L_BRACKET        | '['       
L_CURLY_BRACE    | '{'       
PRINT_KWORD      | 'print'   
L_PARENTHESIS    | '('       
STRING           | '"Hello"' 
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
R_BRACKET        | ']'       
SEMICOLON        | ';'       
VOID_KWORD       | 'void'    
ID               | 'printSum'
L_PARENTHESIS    | '('       
ID               | 'a'       
COLON            | ':'       
INT_KWORD        | 'int'     
COMMA            | ','       
ID               | 'b'       
COLON            | ':'       
INT_KWORD        | 'int'     
R_PARENTHESIS    | ')'       
L_BRACKET        | '['       
VAR_KWORD        | 'var'     
ID               | 'result'  
COLON            | ':'       
INT_KWORD        | 'int'     
SEMICOLON        | ';'       
L_CURLY_BRACE    | '{'       
ID               | 'result'  
EQUAL            | '='       
ID               | 'a'       
PLUS             | '+'       
ID               | 'b'       
SEMICOLON        | ';'       
PRINT_KWORD      | 'print'   
L_PARENTHESIS    | '('       
ID               | 'result'  
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
R_BRACKET        | ']'       
SEMICOLON        | ';'       
VOID_KWORD       | 'void'    
ID               | 'greet'   
L_PARENTHESIS    | '('       
R_PARENTHESIS    | ')'       
L_BRACKET        | '['       
VAR_KWORD        | 'var'     
ID               | 'msg'     
COLON            | ':'       
FLOAT_KWORD      | 'float'   
SEMICOLON        | ';'       
L_CURLY_BRACE    | '{'       
PRINT_KWORD      | 'print'   
L_PARENTHESIS    | '('       
STRING           | '"Hello"' 
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
R_BRACKET        | ']'       
SEMICOLON        | ';'       
MAIN_KWORD       | 'main'    
L_CURLY_BRACE    | '{'       
ID               | 'x'       
EQUAL            | '='       
CTE              | '3'       
PLUS             | '+'       
CTE              | '4'       
MINUS            | '-'       
CTE              | '2'       
MULT_SIGN        | '*'       
CTE              | '5'       
MINUS            | '-'       
CTE              | '2'       
SEMICOLON        | ';'       
ID               | 'y'       
EQUAL            | '='       
CTE              | '5'       
SEMICOLON        | ';'       
ID               | 'total'   
EQUAL            | '='       
ID               | 'x'       
PLUS             | '+'       
ID               | 'y'       
SEMICOLON        | ';'       
IF_KWORD         | 'if'      
L_PARENTHESIS    | '('       
ID               | 'x'       
LESS_THAN        | '<'       
CTE              | '5'       
R_PARENTHESIS    | ')'       
L_CURLY_BRACE    | '{'       
ID               | 'x'       
EQUAL            | '='       
ID               | 'x'       
PLUS             | '+'       
CTE              | '1'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
ELSE_KWORD       | 'else'    
L_CURLY_BRACE    | '{'       
ID               | 'x'       
EQUAL            | '='       
CTE              | '0'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
SEMICOLON        | ';'       
IF_KWORD         | 'if'      
L_PARENTHESIS    | '('       
ID               | 'x'       
GREATER_THAN     | '>'       
CTE              | '0'       
R_PARENTHESIS    | ')'       
L_CURLY_BRACE    | '{'       
PRINT_KWORD      | 'print'   
L_PARENTHESIS    | '('       
ID               | 'x'       
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
SEMICOLON        | ';'       
WHILE_KWORD      | 'while'   
L_PARENTHESIS    | '('       
ID               | 'y'       
LESS_THAN        | '<'       
CTE              | '10'      
R_PARENTHESIS    | ')'       
DO_KWORD         | 'do'      
L_CURLY_BRACE    | '{'       
ID               | 'y'       
EQUAL            | '='       
ID               | 'y'       
PLUS             | '+'       
CTE              | '1'       
SEMICOLON        | ';'       
PRINT_KWORD      | 'print'   
L_PARENTHESIS    | '('       
STRING           | '"Agua"'  
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
SEMICOLON        | ';'       
WHILE_KWORD      | 'while'   
L_PARENTHESIS    | '('       
ID               | 'x'       
GREATER_THAN     | '>'       
CTE              | '0'       
R_PARENTHESIS    | ')'       
DO_KWORD         | 'do'      
L_CURLY_BRACE    | '{'       
ID               | 'x'       
EQUAL            | '='       
ID               | 'x'       
MINUS            | '-'       
CTE              | '1'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
SEMICOLON        | ';'       
ID               | 'printSum'
L_PARENTHESIS    | '('       
CTE              | '2'       
COMMA            | ','       
CTE              | '4'       
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
ID               | 'greet'   
L_PARENTHESIS    | '('       
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
PRINT_KWORD      | 'print'   
L_PARENTHESIS    | '('       
STRING           | '"Hello world"'
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
PRINT_KWORD      | 'print'   
L_PARENTHESIS    | '('       
ID               | 'y'       
PLUS             | '+'       
CTE              | '2'       
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
PRINT_KWORD      | 'print'   
L_PARENTHESIS    | '('       
ID               | 'x'       
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
PRINT_KWORD      | 'print'   
L_PARENTHESIS    | '('       
STRING           | '"cama de agua"'
COMMA            | ','       
ID               | 'y'       
COMMA            | ','       
STRING           | '"agua"'  
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
PRINT_KWORD      | 'print'   
L_PARENTHESIS    | '('       
ID               | 'y'       
COMMA            | ','       
STRING           | '"perro"' 
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
END_KWORD        | 'end'     


Árbol sintáctico (raw):
------------------------------
program_vars_funcs
  program
  myProgram
  ;
  vars_multiple_ids
    var
    x
    ,
    y
    :
    type_int	int
    ;
    a
    ,
    b
    :
    type_float	float
    ;
    c_d8
    ,
    d
    :
    type_int	int
    ;
    total
    :
    type_int	int
    ;
  funcs_no_vars
    void
    prinst
    (
    )
    [
    body_statement
      {
      statement
        print_string
          print
          (
          "Hello"
          )
          ;
      }
    ]
    ;
  funcs_multiple_ids
    void
    printSum
    (
    a
    :
    type_int	int
    ,
    b
    :
    type_int	int
    )
    [
    vars_one_id
      var
      result
      :
      type_int	int
      ;
    body_statement
      {
      statement
        assign
          result
          =
          expression_simple
            exp_plus
              exp_simple
                term_simple
                  factor_id	a
              +
              term_simple
                factor_id	b
          ;
      statement
        f_call_one_expression
          print
          (
          expression_simple
            exp_simple
              term_simple
                factor_id	result
          )
          ;
      }
    ]
    ;
  funcs_simple
    void
    greet
    (
    )
    [
    vars_one_id
      var
      msg
      :
      type_float	float
      ;
    body_statement
      {
      statement
        print_string
          print
          (
          "Hello"
          )
          ;
      }
    ]
    ;
  main
  body_statement
    {
    statement
      assign
        x
        =
        expression_simple
          exp_minus
            exp_plus
              exp_simple
                term_simple
                  factor_cte	3
              +
              term_simple
                factor_cte	4
            -
            term_mult_sign
              term_simple
                factor_cte	2
              *
              factor_cte	5
            -
            term_simple
              factor_cte	2
        ;
    statement
      assign
        y
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte	5
        ;
    statement
      assign
        total
        =
        expression_simple
          exp_plus
            exp_simple
              term_simple
                factor_id	x
            +
            term_simple
              factor_id	y
        ;
    statement
      condition_if_else
        if
        (
        expression_less_than
          exp_simple
            term_simple
              factor_id	x
          <
          exp_simple
            term_simple
              factor_cte	5
        )
        body_statement
          {
          statement
            assign
              x
              =
              expression_simple
                exp_plus
                  exp_simple
                    term_simple
                      factor_id	x
                  +
                  term_simple
                    factor_cte	1
              ;
          }
        else
        body_statement
          {
          statement
            assign
              x
              =
              expression_simple
                exp_simple
                  term_simple
                    factor_cte	0
              ;
          }
        ;
    statement
      condition_if
        if
        (
        expression_greater_than
          exp_simple
            term_simple
              factor_id	x
          >
          exp_simple
            term_simple
              factor_cte	0
        )
        body_statement
          {
          statement
            f_call_one_expression
              print
              (
              expression_simple
                exp_simple
                  term_simple
                    factor_id	x
              )
              ;
          }
        ;
    statement
      cycle
        while
        (
        expression_less_than
          exp_simple
            term_simple
              factor_id	y
          <
          exp_simple
            term_simple
              factor_cte	10
        )
        do
        body_statement
          {
          statement
            assign
              y
              =
              expression_simple
                exp_plus
                  exp_simple
                    term_simple
                      factor_id	y
                  +
                  term_simple
                    factor_cte	1
              ;
          statement
            print_string
              print
              (
              "Agua"
              )
              ;
          }
        ;
    statement
      cycle
        while
        (
        expression_greater_than
          exp_simple
            term_simple
              factor_id	x
          >
          exp_simple
            term_simple
              factor_cte	0
        )
        do
        body_statement
          {
          statement
            assign
              x
              =
              expression_simple
                exp_minus
                  exp_simple
                    term_simple
                      factor_id	x
                  -
                  term_simple
                    factor_cte	1
              ;
          }
        ;
    statement
      f_call_multiple_expressions
        printSum
        (
        expression_simple
          exp_simple
            term_simple
              factor_cte	2
        ,
        expression_simple
          exp_simple
            term_simple
              factor_cte	4
        )
        ;
    statement
      f_call_simple
        greet
        (
        )
        ;
    statement
      print_string
        print
        (
        "Hello world"
        )
        ;
    statement
      f_call_one_expression
        print
        (
        expression_simple
          exp_plus
            exp_simple
              term_simple
                factor_id	y
            +
            term_simple
              factor_cte	2
        )
        ;
    statement
      f_call_one_expression
        print
        (
        expression_simple
          exp_simple
            term_simple
              factor_id	x
        )
        ;
    statement
      print_multiple_expressions
        print
        (
        "cama de agua"
        ,
        expression_simple
          exp_simple
            term_simple
              factor_id	y
        ,
        "agua"
        )
        ;
    statement
      print_multiple_expressions
        print
        (
        expression_simple
          exp_simple
            term_simple
              factor_id	y
        ,
        "perro"
        )
        ;
    }
  end



Árbol transformado (AST):
------------------------------
{'type': 'program_vars_funcs', 'program_name': {'type': 'id', 'value': 'myProgram'}, 'vars': {'type': 'vars_multiple_ids', 'declarations': [{'ids': [{'type': 'id', 'value': 'x'}, {'type': 'id', 'value': 'y'}], 'type': {'type': 'type_int', 'value': 'int'}}, {'ids': [{'type': 'id', 'value': 'a'}, {'type': 'id', 'value': 'b'}], 'type': {'type': 'type_float', 'value': 'float'}}, {'ids': [{'type': 'id', 'value': 'c_d8'}, {'type': 'id', 'value': 'd'}], 'type': {'type': 'type_int', 'value': 'int'}}, {'ids': [{'type': 'id', 'value': 'total'}], 'type': {'type': 'type_int', 'value': 'int'}}]}, 'funcs': [{'type': 'funcs_no_vars', 'funcs_name': {'type': 'id', 'value': 'prinst'}, 'body': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'print_string', 'value': {'type': 'string', 'value': 'Hello'}}}]}}, {'type': 'funcs_multiple_ids', 'funcs_name': {'type': 'id', 'value': 'printSum'}, 'parameters': [{'id': {'type': 'id', 'value': 'a'}, 'type': {'type': 'type_int', 'value': 'int'}}, {'id': {'type': 'id', 'value': 'b'}, 'type': {'type': 'type_int', 'value': 'int'}}], 'vars': {'type': 'vars_one_id', 'declarations': [{'id': {'type': 'id', 'value': 'result'}, 'type': {'type': 'type_int', 'value': 'int'}}], 'a': {'type': 'int', 'assigned': True, 'address': 1000}, 'b': {'type': 'int', 'assigned': True, 'address': 1001}, 'result': {'type': 'int', 'assigned': True, 'address': 1002}}, 'body': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'result'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'a'}}}}, Token('PLUS', '+'), {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'b'}}}]}}}}, {'type': 'print_expression', 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'result'}}}}}}]}}, {'type': 'funcs_simple', 'funcs_name': {'type': 'id', 'value': 'greet'}, 'vars': {'type': 'vars_one_id', 'declarations': [{'id': {'type': 'id', 'value': 'msg'}, 'type': {'type': 'type_float', 'value': 'float'}}], 'msg': {'type': 'float', 'assigned': False, 'address': 2000}}, 'body': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'print_string', 'value': {'type': 'string', 'value': 'Hello'}}}]}}], 'body': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'x'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp', 'value': [{'type': 'exp', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 3}}}, Token('PLUS', '+'), {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 4}}]}, Token('MINUS', '-'), {'type': 'term', 'value': [{'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 2}}, Token('MULT_SIGN', '*'), {'type': 'factor_cte', 'value': 5}]}, Token('MINUS', '-'), {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 2}}]}}}}, {'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'y'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 5}}}}}}, {'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'total'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'x'}}}}, Token('PLUS', '+'), {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'y'}}}]}}}}, {'type': 'statement', 'value': {'type': 'condition_if_else', 'condition': {'type': 'expression_less_than', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'x'}}}}, Token('LESS_THAN', '<'), {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 5}}}]}, 'body1': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'x'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'x'}}}}, Token('PLUS', '+'), {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 1}}]}}}}]}, 'body2': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'x'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 0}}}}}}]}}}, {'type': 'statement', 'value': {'type': 'condition_if', 'condition': {'type': 'expression_greater_than', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'x'}}}}, Token('GREATER_THAN', '>'), {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 0}}}]}, 'body': {'type': 'body_statement', 'value': [{'type': 'print_expression', 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'x'}}}}}}]}}}, {'type': 'statement', 'value': {'type': 'cycle', 'condition': {'type': 'expression_less_than', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'y'}}}}, Token('LESS_THAN', '<'), {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 10}}}]}, 'body': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'y'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'y'}}}}, Token('PLUS', '+'), {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 1}}]}}}}, {'type': 'statement', 'value': {'type': 'print_string', 'value': {'type': 'string', 'value': 'Agua'}}}]}}}, {'type': 'statement', 'value': {'type': 'cycle', 'condition': {'type': 'expression_greater_than', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'x'}}}}, Token('GREATER_THAN', '>'), {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 0}}}]}, 'body': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'x'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'x'}}}}, Token('MINUS', '-'), {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 1}}]}}}}]}}}, {'type': 'statement', 'value': {'type': 'f_call_multiple_expressions', 'function': {'type': 'id', 'value': 'printSum'}, 'value': [{'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 2}}}}, {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 4}}}}]}}, {'type': 'statement', 'value': {'type': 'f_call_simple', 'value': {'type': 'id', 'value': 'greet'}}}, {'type': 'statement', 'value': {'type': 'print_string', 'value': {'type': 'string', 'value': 'Hello world'}}}, {'type': 'print_expression', 'value': {'type': 'expression_simple', 'value': {'type': 'exp', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'y'}}}}, Token('PLUS', '+'), {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 2}}]}}}, {'type': 'print_expression', 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'x'}}}}}}, {'type': 'statement', 'value': {'type': 'print_multiple_expressions', 'value': [{'type': 'string', 'value': 'cama de agua'}, {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'y'}}}}}, {'type': 'string', 'value': 'agua'}]}}, {'type': 'statement', 'value': {'type': 'print_multiple_expressions', 'value': [{'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'y'}}}}}, {'type': 'string', 'value': 'perro'}]}}]}}


Directorio de funciones y variables:
------------------------------
Scope: global
Start Point: 0
  Variables:
    x : int | Dirección: 3000
    y : int | Dirección: 3001
    a : float | Dirección: 4000
    b : float | Dirección: 4001
    c_d8 : int | Dirección: 3002
    d : int | Dirección: 3003
    total : int | Dirección: 3004
  Recursos: temporals(int=13), vars(int=5, float=2)

Scope: prinst
Start Point: 1
  Variables:

Scope: printSum
Start Point: 4
  Parámetros:
    a : int
    b : int
  Variables:
    a : int | Dirección: 1000
    b : int | Dirección: 1001
    result : int | Dirección: 1002
  Recursos: temporals(int=1), vars(int=1), params(int=2)

Scope: greet
Start Point: 9
  Variables:
    msg : float | Dirección: 2000
  Recursos: vars(float=1)



Cuádruplos generados:
------------------------------
0   10                               12        
1   9                                9000      
2   17                                         
3   16                                         
4   1          1000       1001       5000      
5   7          5000                  1002      
6   9                                1002      
7   17                                         
8   16                                         
9   9                                9000      
10  17                                         
11  16                                         
12  1          7000       7001       5001      
13  3          7002       7003       5002      
14  2          5001       5002       5003      
15  2          5003       7002       5004      
16  7          5004                  3000      
17  7          7003                  3001      
18  1          3000       3001       5005      
19  7          5005                  3004      
20  6          3000       7003       5006      
21  11         5006                  25        
22  1          3000       7004       5007      
23  7          5007                  3000      
24  10                               26        
25  7          7005                  3000      
26  5          3000       7005       5008      
27  11         5008                  30        
28  9                                3000      
29  17                                         
30  6          3001       7006       5009      
31  11         5009                  37        
32  1          3001       7004       5010      
33  7          5010                  3001      
34  9                                9001      
35  17                                         
36  10                               30        
37  5          3000       7005       5011      
38  11         5011                  42        
39  2          3000       7004       5012      
40  7          5012                  3000      
41  10                               37        
42  13         printSum                        
43  15         7002                  p1        
44  15         7001                  p2        
45  14         printSum                        
46  13         greet                           
47  14         greet                           
48  9                                9002      
49  17                                         
50  1          3001       7002       5013      
51  9                                5013      
52  17                                         
53  9                                3000      
54  17                                         
55  9                                9003      
56  9                                3001      
57  9                                9004      
58  17                                         
59  9                                3001      
60  9                                9005      
61  17                                         


Tabla de constantes:
------------------------------
Valor: Hello      | Tipo: string     | Dirección: 9000      
Valor: 3          | Tipo: int        | Dirección: 7000      
Valor: 4          | Tipo: int        | Dirección: 7001      
Valor: 2          | Tipo: int        | Dirección: 7002      
Valor: 5          | Tipo: int        | Dirección: 7003      
Valor: 1          | Tipo: int        | Dirección: 7004      
Valor: 0          | Tipo: int        | Dirección: 7005      
Valor: 10         | Tipo: int        | Dirección: 7006      
Valor: Agua       | Tipo: string     | Dirección: 9001      
Valor: Hello world | Tipo: string     | Dirección: 9002      
Valor: cama de agua | Tipo: string     | Dirección: 9003      
Valor: agua       | Tipo: string     | Dirección: 9004      
Valor: perro      | Tipo: string     | Dirección: 9005      


Uso de memoria:
------------------------------
LOCAL
INT -> Rango: 1000 - 1999 | Dirección actual: 1003
FLOAT -> Rango: 2000 - 2999 | Dirección actual: 2001
-----------------------------------------------------------
GLOBAL
INT -> Rango: 3000 - 3999 | Dirección actual: 3005
FLOAT -> Rango: 4000 - 4999 | Dirección actual: 4002
-----------------------------------------------------------
TEMPORAL
INT -> Rango: 5000 - 5999 | Dirección actual: 5014
FLOAT -> Rango: 6000 - 6999 | Dirección actual: 6000
-----------------------------------------------------------
CONSTANTE
INT -> Rango: 7000 - 7999 | Dirección actual: 7007
FLOAT -> Rango: 8000 - 8999 | Dirección actual: 8000
STRING -> Rango: 9000 - 9999 | Dirección actual: 9006
-----------------------------------------------------------


Salida de la Máquina Virtual:
------------------------------
Agua
Agua
Agua
Agua
Agua
6
Hello
Hello world
12
-4
cama de agua10agua
10perro
