[RESULTADO] EXITOSO
--------------------------------------------------

Código original:
------------------------------
program FibonacciRecursive;
var
  n, i, fib : int;

void fibo(x : int) [
  var
    a, b : int;
  {
    if (x < 2) {
      fib = x;
    } else {
      fibo(x - 1);
      a = fib;
      fibo(x - 2);
      b = fib;
      fib = a + b;
    };
  }
];

main {
  n = 9; 
  print("Serie de Fibonacci desde F(0) hasta F(", n, "):");
  
  i = 0;
  while (i < n + 1) do {  
    fibo(i);
    print(fib);
    i = i + 1;
  };
}
end


--------------------------------------------------

Tokens encontrados:
------------------------------
Token            |   Carácter
------------------------------
PROGRAM_KWORD    | 'program' 
ID               | 'FibonacciRecursive'
SEMICOLON        | ';'       
VAR_KWORD        | 'var'     
ID               | 'n'       
COMMA            | ','       
ID               | 'i'       
COMMA            | ','       
ID               | 'fib'     
COLON            | ':'       
INT_KWORD        | 'int'     
SEMICOLON        | ';'       
VOID_KWORD       | 'void'    
ID               | 'fibo'    
L_PARENTHESIS    | '('       
ID               | 'x'       
COLON            | ':'       
INT_KWORD        | 'int'     
R_PARENTHESIS    | ')'       
L_BRACKET        | '['       
VAR_KWORD        | 'var'     
ID               | 'a'       
COMMA            | ','       
ID               | 'b'       
COLON            | ':'       
INT_KWORD        | 'int'     
SEMICOLON        | ';'       
L_CURLY_BRACE    | '{'       
IF_KWORD         | 'if'      
L_PARENTHESIS    | '('       
ID               | 'x'       
LESS_THAN        | '<'       
CTE              | '2'       
R_PARENTHESIS    | ')'       
L_CURLY_BRACE    | '{'       
ID               | 'fib'     
EQUAL            | '='       
ID               | 'x'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
ELSE_KWORD       | 'else'    
L_CURLY_BRACE    | '{'       
ID               | 'fibo'    
L_PARENTHESIS    | '('       
ID               | 'x'       
MINUS            | '-'       
CTE              | '1'       
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
ID               | 'a'       
EQUAL            | '='       
ID               | 'fib'     
SEMICOLON        | ';'       
ID               | 'fibo'    
L_PARENTHESIS    | '('       
ID               | 'x'       
MINUS            | '-'       
CTE              | '2'       
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
ID               | 'b'       
EQUAL            | '='       
ID               | 'fib'     
SEMICOLON        | ';'       
ID               | 'fib'     
EQUAL            | '='       
ID               | 'a'       
PLUS             | '+'       
ID               | 'b'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
R_BRACKET        | ']'       
SEMICOLON        | ';'       
MAIN_KWORD       | 'main'    
L_CURLY_BRACE    | '{'       
ID               | 'n'       
EQUAL            | '='       
CTE              | '9'       
SEMICOLON        | ';'       
PRINT_KWORD      | 'print'   
L_PARENTHESIS    | '('       
STRING           | '"Serie de Fibonacci desde F(0) hasta F("'
COMMA            | ','       
ID               | 'n'       
COMMA            | ','       
STRING           | '"):"'    
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
ID               | 'i'       
EQUAL            | '='       
CTE              | '0'       
SEMICOLON        | ';'       
WHILE_KWORD      | 'while'   
L_PARENTHESIS    | '('       
ID               | 'i'       
LESS_THAN        | '<'       
ID               | 'n'       
PLUS             | '+'       
CTE              | '1'       
R_PARENTHESIS    | ')'       
DO_KWORD         | 'do'      
L_CURLY_BRACE    | '{'       
ID               | 'fibo'    
L_PARENTHESIS    | '('       
ID               | 'i'       
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
PRINT_KWORD      | 'print'   
L_PARENTHESIS    | '('       
ID               | 'fib'     
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
ID               | 'i'       
EQUAL            | '='       
ID               | 'i'       
PLUS             | '+'       
CTE              | '1'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
END_KWORD        | 'end'     


Árbol sintáctico (raw):
------------------------------
program_vars_funcs
  program
  FibonacciRecursive
  ;
  vars_multiple_ids
    var
    n
    ,
    i
    ,
    fib
    :
    type_int	int
    ;
  funcs_id
    void
    fibo
    (
    x
    :
    type_int	int
    )
    [
    vars_multiple_ids
      var
      a
      ,
      b
      :
      type_int	int
      ;
    body_statement
      {
      statement
        condition_if_else
          if
          (
          expression_less_than
            exp_simple
              term_simple
                factor_id	x
            <
            exp_simple
              term_simple
                factor_cte	2
          )
          body_statement
            {
            statement
              assign
                fib
                =
                expression_simple
                  exp_simple
                    term_simple
                      factor_id	x
                ;
            }
          else
          body_statement
            {
            statement
              f_call_one_expression
                fibo
                (
                expression_simple
                  exp_minus
                    exp_simple
                      term_simple
                        factor_id	x
                    -
                    term_simple
                      factor_cte	1
                )
                ;
            statement
              assign
                a
                =
                expression_simple
                  exp_simple
                    term_simple
                      factor_id	fib
                ;
            statement
              f_call_one_expression
                fibo
                (
                expression_simple
                  exp_minus
                    exp_simple
                      term_simple
                        factor_id	x
                    -
                    term_simple
                      factor_cte	2
                )
                ;
            statement
              assign
                b
                =
                expression_simple
                  exp_simple
                    term_simple
                      factor_id	fib
                ;
            statement
              assign
                fib
                =
                expression_simple
                  exp_plus
                    exp_simple
                      term_simple
                        factor_id	a
                    +
                    term_simple
                      factor_id	b
                ;
            }
          ;
      }
    ]
    ;
  main
  body_statement
    {
    statement
      assign
        n
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte	9
        ;
    statement
      print_multiple_expressions
        print
        (
        "Serie de Fibonacci desde F(0) hasta F("
        ,
        expression_simple
          exp_simple
            term_simple
              factor_id	n
        ,
        "):"
        )
        ;
    statement
      assign
        i
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte	0
        ;
    statement
      cycle
        while
        (
        expression_less_than
          exp_simple
            term_simple
              factor_id	i
          <
          exp_plus
            exp_simple
              term_simple
                factor_id	n
            +
            term_simple
              factor_cte	1
        )
        do
        body_statement
          {
          statement
            f_call_one_expression
              fibo
              (
              expression_simple
                exp_simple
                  term_simple
                    factor_id	i
              )
              ;
          statement
            f_call_one_expression
              print
              (
              expression_simple
                exp_simple
                  term_simple
                    factor_id	fib
              )
              ;
          statement
            assign
              i
              =
              expression_simple
                exp_plus
                  exp_simple
                    term_simple
                      factor_id	i
                  +
                  term_simple
                    factor_cte	1
              ;
          }
        ;
    }
  end



Árbol transformado (AST):
------------------------------
{'type': 'program_vars_funcs', 'program_name': {'type': 'id', 'value': 'FibonacciRecursive'}, 'vars': {'type': 'vars_multiple_ids', 'declarations': [{'ids': [{'type': 'id', 'value': 'n'}, {'type': 'id', 'value': 'i'}, {'type': 'id', 'value': 'fib'}], 'type': {'type': 'type_int', 'value': 'int'}}]}, 'funcs': [{'type': 'funcs_id', 'funcs_name': {'type': 'id', 'value': 'fibo'}, 'param': {'type': 'id', 'value': 'x'}, 'param_type': {'type': 'type_int', 'value': 'int'}, 'vars': {'type': 'vars_multiple_ids', 'declarations': [{'ids': [{'type': 'id', 'value': 'a'}, {'type': 'id', 'value': 'b'}], 'type': {'type': 'type_int', 'value': 'int'}}], 'x': {'type': 'int', 'assigned': True, 'address': 1000}, 'a': {'type': 'int', 'assigned': True, 'address': 1001}, 'b': {'type': 'int', 'assigned': True, 'address': 1002}}, 'body': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'condition_if_else', 'condition': {'type': 'expression_less_than', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'x'}}}}, Token('LESS_THAN', '<'), {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 2}}}]}, 'body1': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'fib'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'x'}}}}}}}]}, 'body2': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'f_call_one_expression', 'function': {'type': 'id', 'value': 'fibo'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'x'}}}}, Token('MINUS', '-'), {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 1}}]}}}}, {'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'a'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'fib'}}}}}}}, {'type': 'statement', 'value': {'type': 'f_call_one_expression', 'function': {'type': 'id', 'value': 'fibo'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'x'}}}}, Token('MINUS', '-'), {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 2}}]}}}}, {'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'b'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'fib'}}}}}}}, {'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'fib'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'a'}}}}, Token('PLUS', '+'), {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'b'}}}]}}}}]}}}]}}], 'body': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'n'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 9}}}}}}, {'type': 'statement', 'value': {'type': 'print_multiple_expressions', 'value': [{'type': 'string', 'value': 'Serie de Fibonacci desde F(0) hasta F('}, {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'n'}}}}}, {'type': 'string', 'value': '):'}]}}, {'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'i'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 0}}}}}}, {'type': 'statement', 'value': {'type': 'cycle', 'condition': {'type': 'expression_less_than', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'i'}}}}, Token('LESS_THAN', '<'), {'type': 'exp', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'n'}}}}, Token('PLUS', '+'), {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 1}}]}]}, 'body': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'f_call_one_expression', 'function': {'type': 'id', 'value': 'fibo'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'i'}}}}}}}, {'type': 'print_expression', 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'fib'}}}}}}, {'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'i'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'i'}}}}, Token('PLUS', '+'), {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 1}}]}}}}]}}}]}}


Directorio de funciones y variables:
------------------------------
Scope: global
Start Point: 0
  Variables:
    n : int | Dirección: 3000
    i : int | Dirección: 3001
    fib : int | Dirección: 3002
  Recursos: temporals(int=3), vars(int=3)

Scope: fibo
Start Point: 1
  Parámetros:
    x : int
  Variables:
    x : int | Dirección: 1000
    a : int | Dirección: 1001
    b : int | Dirección: 1002
  Recursos: temporals(int=4), vars(int=2), params(int=1)



Cuádruplos generados:
------------------------------
0   10                               18        
1   6          1000       7000       5000      
2   11         5000                  5         
3   7          1000                  3002      
4   10                               17        
5   13         fibo                            
6   2          1000       7001       5001      
7   15         5001                  p1        
8   14         fibo                            
9   7          3002                  1001      
10  13         fibo                            
11  2          1000       7000       5002      
12  15         5002                  p1        
13  14         fibo                            
14  7          3002                  1002      
15  1          1001       1002       5003      
16  7          5003                  3002      
17  16                                         
18  7          7002                  3000      
19  9                                9000      
20  9                                3000      
21  9                                9001      
22  17                                         
23  7          7003                  3001      
24  1          3000       7001       5004      
25  6          3001       5004       5005      
26  11         5005                  35        
27  13         fibo                            
28  15         3001                  p1        
29  14         fibo                            
30  9                                3002      
31  17                                         
32  1          3001       7001       5006      
33  7          5006                  3001      
34  10                               24        


Tabla de constantes:
------------------------------
Valor: 2          | Tipo: int        | Dirección: 7000      
Valor: 1          | Tipo: int        | Dirección: 7001      
Valor: 9          | Tipo: int        | Dirección: 7002      
Valor: Serie de Fibonacci desde F(0) hasta F( | Tipo: string     | Dirección: 9000      
Valor: ):         | Tipo: string     | Dirección: 9001      
Valor: 0          | Tipo: int        | Dirección: 7003      


Uso de memoria:
------------------------------
LOCAL
INT -> Rango: 1000 - 1999 | Dirección actual: 1003
FLOAT -> Rango: 2000 - 2999 | Dirección actual: 2000
-----------------------------------------------------------
GLOBAL
INT -> Rango: 3000 - 3999 | Dirección actual: 3003
FLOAT -> Rango: 4000 - 4999 | Dirección actual: 4000
-----------------------------------------------------------
TEMPORAL
INT -> Rango: 5000 - 5999 | Dirección actual: 5007
FLOAT -> Rango: 6000 - 6999 | Dirección actual: 6000
-----------------------------------------------------------
CONSTANTE
INT -> Rango: 7000 - 7999 | Dirección actual: 7004
FLOAT -> Rango: 8000 - 8999 | Dirección actual: 8000
STRING -> Rango: 9000 - 9999 | Dirección actual: 9002
-----------------------------------------------------------


Salida de la Máquina Virtual:
------------------------------
Serie de Fibonacci desde F(0) hasta F(9):
0
1
1
2
3
5
8
13
21
34
