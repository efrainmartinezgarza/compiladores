[RESULTADO] EXITOSO
--------------------------------------------------

Código original:
------------------------------
program Simple;
var
  x : int;

void SquareAndCheck(num : int) [
  var
    sq : int;
  {
    sq = num * num;
    if (sq > 50) {
      print("Grande: ", sq);
    } else {
      print("Pequenio: ", sq);
    };
  }
];

main {
  x = 5;
  SquareAndCheck(x);
  x = 3;
  SquareAndCheck(x);
}
end


--------------------------------------------------

Tokens encontrados:
------------------------------
Token            |   Carácter
------------------------------
PROGRAM_KWORD    | 'program' 
ID               | 'Simple'  
SEMICOLON        | ';'       
VAR_KWORD        | 'var'     
ID               | 'x'       
COLON            | ':'       
INT_KWORD        | 'int'     
SEMICOLON        | ';'       
VOID_KWORD       | 'void'    
ID               | 'SquareAndCheck'
L_PARENTHESIS    | '('       
ID               | 'num'     
COLON            | ':'       
INT_KWORD        | 'int'     
R_PARENTHESIS    | ')'       
L_BRACKET        | '['       
VAR_KWORD        | 'var'     
ID               | 'sq'      
COLON            | ':'       
INT_KWORD        | 'int'     
SEMICOLON        | ';'       
L_CURLY_BRACE    | '{'       
ID               | 'sq'      
EQUAL            | '='       
ID               | 'num'     
MULT_SIGN        | '*'       
ID               | 'num'     
SEMICOLON        | ';'       
IF_KWORD         | 'if'      
L_PARENTHESIS    | '('       
ID               | 'sq'      
GREATER_THAN     | '>'       
CTE              | '50'      
R_PARENTHESIS    | ')'       
L_CURLY_BRACE    | '{'       
PRINT_KWORD      | 'print'   
L_PARENTHESIS    | '('       
STRING           | '"Grande: "'
COMMA            | ','       
ID               | 'sq'      
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
ELSE_KWORD       | 'else'    
L_CURLY_BRACE    | '{'       
PRINT_KWORD      | 'print'   
L_PARENTHESIS    | '('       
STRING           | '"Pequenio: "'
COMMA            | ','       
ID               | 'sq'      
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
R_BRACKET        | ']'       
SEMICOLON        | ';'       
MAIN_KWORD       | 'main'    
L_CURLY_BRACE    | '{'       
ID               | 'x'       
EQUAL            | '='       
CTE              | '5'       
SEMICOLON        | ';'       
ID               | 'SquareAndCheck'
L_PARENTHESIS    | '('       
ID               | 'x'       
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
ID               | 'x'       
EQUAL            | '='       
CTE              | '3'       
SEMICOLON        | ';'       
ID               | 'SquareAndCheck'
L_PARENTHESIS    | '('       
ID               | 'x'       
R_PARENTHESIS    | ')'       
SEMICOLON        | ';'       
R_CURLY_BRACE    | '}'       
END_KWORD        | 'end'     


Árbol sintáctico (raw):
------------------------------
program_vars_funcs
  program
  Simple
  ;
  vars_one_id
    var
    x
    :
    type_int	int
    ;
  funcs_id
    void
    SquareAndCheck
    (
    num
    :
    type_int	int
    )
    [
    vars_one_id
      var
      sq
      :
      type_int	int
      ;
    body_statement
      {
      statement
        assign
          sq
          =
          expression_simple
            exp_simple
              term_mult_sign
                term_simple
                  factor_id	num
                *
                factor_id	num
          ;
      statement
        condition_if_else
          if
          (
          expression_greater_than
            exp_simple
              term_simple
                factor_id	sq
            >
            exp_simple
              term_simple
                factor_cte	50
          )
          body_statement
            {
            statement
              print_multiple_expressions
                print
                (
                "Grande: "
                ,
                expression_simple
                  exp_simple
                    term_simple
                      factor_id	sq
                )
                ;
            }
          else
          body_statement
            {
            statement
              print_multiple_expressions
                print
                (
                "Pequenio: "
                ,
                expression_simple
                  exp_simple
                    term_simple
                      factor_id	sq
                )
                ;
            }
          ;
      }
    ]
    ;
  main
  body_statement
    {
    statement
      assign
        x
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte	5
        ;
    statement
      f_call_one_expression
        SquareAndCheck
        (
        expression_simple
          exp_simple
            term_simple
              factor_id	x
        )
        ;
    statement
      assign
        x
        =
        expression_simple
          exp_simple
            term_simple
              factor_cte	3
        ;
    statement
      f_call_one_expression
        SquareAndCheck
        (
        expression_simple
          exp_simple
            term_simple
              factor_id	x
        )
        ;
    }
  end



Árbol transformado (AST):
------------------------------
{'type': 'program_vars_funcs', 'program_name': {'type': 'id', 'value': 'Simple'}, 'vars': {'type': 'vars_one_id', 'declarations': [{'id': {'type': 'id', 'value': 'x'}, 'type': {'type': 'type_int', 'value': 'int'}}]}, 'funcs': [{'type': 'funcs_id', 'funcs_name': {'type': 'id', 'value': 'SquareAndCheck'}, 'param': {'type': 'id', 'value': 'num'}, 'param_type': {'type': 'type_int', 'value': 'int'}, 'vars': {'type': 'vars_one_id', 'declarations': [{'id': {'type': 'id', 'value': 'sq'}, 'type': {'type': 'type_int', 'value': 'int'}}], 'num': {'type': 'int', 'assigned': True, 'address': 1000}, 'sq': {'type': 'int', 'assigned': True, 'address': 1001}}, 'body': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'sq'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term', 'value': [{'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'num'}}}, Token('MULT_SIGN', '*'), {'type': 'factor_id', 'value': {'type': 'id', 'value': 'num'}}]}}}}}, {'type': 'statement', 'value': {'type': 'condition_if_else', 'condition': {'type': 'expression_greater_than', 'value': [{'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'sq'}}}}, Token('GREATER_THAN', '>'), {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 50}}}]}, 'body1': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'print_multiple_expressions', 'value': [{'type': 'string', 'value': 'Grande: '}, {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'sq'}}}}}]}}]}, 'body2': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'print_multiple_expressions', 'value': [{'type': 'string', 'value': 'Pequenio: '}, {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'sq'}}}}}]}}]}}}]}}], 'body': {'type': 'body_statement', 'value': [{'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'x'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 5}}}}}}, {'type': 'statement', 'value': {'type': 'f_call_one_expression', 'function': {'type': 'id', 'value': 'SquareAndCheck'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'x'}}}}}}}, {'type': 'statement', 'value': {'type': 'assign', 'id': {'type': 'id', 'value': 'x'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_cte', 'value': 3}}}}}}, {'type': 'statement', 'value': {'type': 'f_call_one_expression', 'function': {'type': 'id', 'value': 'SquareAndCheck'}, 'value': {'type': 'expression_simple', 'value': {'type': 'exp_simple', 'value': {'type': 'term_simple', 'value': {'type': 'factor_id', 'value': {'type': 'id', 'value': 'x'}}}}}}}]}}


Directorio de funciones y variables:
------------------------------
Scope: global
Start Point: 0
  Variables:
    x : int | Dirección: 3000
  Recursos: vars(int=1)

Scope: SquareAndCheck
Start Point: 1
  Parámetros:
    num : int
  Variables:
    num : int | Dirección: 1000
    sq : int | Dirección: 1001
  Recursos: temporals(int=2), vars(int=1), params(int=1)



Cuádruplos generados:
------------------------------
0   10                               13        
1   3          1000       1000       5000      
2   7          5000                  1001      
3   5          1001       7000       5001      
4   11         5001                  9         
5   9                                9000      
6   9                                1001      
7   17                                         
8   10                               12        
9   9                                9001      
10  9                                1001      
11  17                                         
12  16                                         
13  7          7001                  3000      
14  13         SquareAndCheck                      
15  15         3000                  p1        
16  14         SquareAndCheck                      
17  7          7002                  3000      
18  13         SquareAndCheck                      
19  15         3000                  p1        
20  14         SquareAndCheck                      


Tabla de constantes:
------------------------------
Valor: 50         | Tipo: int        | Dirección: 7000      
Valor: Grande:    | Tipo: string     | Dirección: 9000      
Valor: Pequenio:  | Tipo: string     | Dirección: 9001      
Valor: 5          | Tipo: int        | Dirección: 7001      
Valor: 3          | Tipo: int        | Dirección: 7002      


Uso de memoria:
------------------------------
LOCAL
INT -> Rango: 1000 - 1999 | Dirección actual: 1002
FLOAT -> Rango: 2000 - 2999 | Dirección actual: 2000
-----------------------------------------------------------
GLOBAL
INT -> Rango: 3000 - 3999 | Dirección actual: 3001
FLOAT -> Rango: 4000 - 4999 | Dirección actual: 4000
-----------------------------------------------------------
TEMPORAL
INT -> Rango: 5000 - 5999 | Dirección actual: 5002
FLOAT -> Rango: 6000 - 6999 | Dirección actual: 6000
-----------------------------------------------------------
CONSTANTE
INT -> Rango: 7000 - 7999 | Dirección actual: 7003
FLOAT -> Rango: 8000 - 8999 | Dirección actual: 8000
STRING -> Rango: 9000 - 9999 | Dirección actual: 9002
-----------------------------------------------------------


Salida de la Máquina Virtual:
------------------------------
Pequenio: 25
Pequenio: 9
